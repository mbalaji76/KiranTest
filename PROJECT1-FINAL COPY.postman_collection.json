{
	"info": {
		"_postman_id": "6ce89dd7-b512-4a1b-aa5c-109a8c01b0cc",
		"name": "PROJECT1-FINAL COPY",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522",
		"_collection_link": "https://kiranmm.postman.co/workspace/PRELUDE-SYS~2c4d429f-f21f-4b6e-91be-44db94a34fa3/collection/5040522-6ce89dd7-b512-4a1b-aa5c-109a8c01b0cc?action=share&source=collection_link&creator=5040522"
	},
	"item": [
		{
			"name": "E2E API AUTOMATION",
			"item": [
				{
					"name": "CREATE A USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code from server is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// MULTIPLE RESPONSE CODES CHECK\r",
									"\r",
									"pm.test(\"Verify if response code is [200, 201, 202, 203]\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,203]);\r",
									"});\r",
									"\r",
									"// ASSERT FOR 2XX-SUCCESSFUL RESPONSE [200-299]\r",
									"\r",
									"pm.test(\"Verify if response code is 2XX success response\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"// ASSERT FOR NOT EXPECTING 2XX-SUCCESSFUL RESPONSE [200-299]\r",
									"\r",
									"pm.test.skip(\"Verify if response code is not a 2XX success response\", function () {\r",
									"    pm.response.to.not.be.success;\r",
									"});\r",
									"\r",
									"// ASSERT FOR 4XX-CLIENT SIDE ERROR\r",
									"\r",
									"pm.test.skip(\"Verify if response code is 4XX client side error\", function () {\r",
									"    pm.response.to.be.clientError;\r",
									"});\r",
									"\r",
									"// ASSERT FOR NOT EXPECTING 4XX-CLIENT SIDE ERROR\r",
									"\r",
									"pm.test(\"Verify if response code is not a 4XX client side error\", function () {\r",
									"    pm.response.to.not.be.clientError;\r",
									"});\r",
									"\r",
									"// ASSERT FOR 5XX-SERVER SIDE ERROR\r",
									"\r",
									"pm.test.skip(\"Verify if response code is 5XX server side error\", function () {\r",
									"    pm.response.to.be.serverError;\r",
									"});\r",
									"\r",
									"// ASSERT FOR NOT EXPECTING 5XX-SERVER SIDE ERROR\r",
									"\r",
									"pm.test(\"Verify if response code is not a 5XX server side error\", function () {\r",
									"    pm.response.to.not.be.serverError;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format from server\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK WITHOUT ARRAY IN RESPONSE BODY\r",
									"\r",
									"pm.test(\"Verify if gender=female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.eql(\"female\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status=active\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"active\");\r",
									"});\r",
									"\r",
									"// API CHAINING CODE\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var extractedID = responseBody.id;\r",
									"var extractedName = responseBody.name;\r",
									"var extractedEmail = responseBody.email;\r",
									"var extractedStatus = responseBody.status;\r",
									"\r",
									"pm.globals.set(\"globalExtractedID\", extractedID);\r",
									"pm.globals.set(\"globalExtractedName\", extractedName);\r",
									"pm.globals.set(\"globalExtractedEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalExtractedStatus\", extractedStatus);\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(\"CREATE A USER API has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS CREATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"CREATE A USER API has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\"); // stop the test execution\r",
									"}\r",
									"\r",
									"// DATA TYPES CHECK\r",
									"\r",
									"console.log(\"The data-type of id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data-type of name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data-type of email field is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The data-type of gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data-type of status field is \"+typeof(pm.response.json().status));\r",
									"\r",
									"// CAPTURING RESPONSE ATTRIBUTES & PRINT THEM\r",
									"\r",
									"console.log(\"The response code received from server is \"+pm.response.code);\r",
									"console.log(\"The response message received from server is \"+pm.response.status);\r",
									"console.log(\"The response time received from server is \"+pm.response.responseTime+\" ms\");\r",
									"console.log(\"The response body size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The response body received from server in JSON format is \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"The response body received from server in TEXT format is \");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are \");\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The count of response headers received from server is \"+pm.response.headers.count());\r",
									"\r",
									"console.log(\"The value of Server response header is \"+pm.response.headers.get(\"Server\"));\r",
									"console.log(\"The value of Date response header is \"+pm.response.headers.get(\"Date\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// CAPTURING REQUEST ATTRIBUTES & PRINT THEM\r",
									"\r",
									"console.log(\"The HTTP method for this request is \"+pm.request.method);\r",
									"console.log(\"The request URL sent to server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The request body sent to server is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers for this request are \");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(\"The count of request headers for this request is \"+pm.request.headers.count());\r",
									"\r",
									"console.log(\"The value of Authorization request header is \"+pm.request.headers.get(\"Authorization\"));\r",
									"console.log(\"The value of Accept request header is \"+pm.request.headers.get(\"Accept\"));\r",
									"console.log(\"The value of Content-Type request header is \"+pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The request body size sent to server is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The API request name is \"+pm.info.requestName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{envAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS CREATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code from server is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server is < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format from server\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// JSON VALUE CHECK WITH ARRAY IN RESPONSE BODY\r",
									"\r",
									"pm.test.skip(\"Verify if name[6]=Lawson, email[6]=Roberta_Huel64@hotmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[6].name).to.eql(\"Lawson\");\r",
									"    pm.expect(jsonData[6].email).to.eql(\"Roberta_Huel64@hotmail.com\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// VERIFY IF THE USER IS CREATED\r",
									"\r",
									"pm.test(\"Verify if the user is created with id=\"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"VERIFY IF USER IS CREATED has PASSED\");\r",
									"    pm.execution.setNextRequest(\"UPDATE THE CREATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"VERIFY IF USER IS CREATED has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\"); // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{envAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE THE CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code from server is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format from server\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if name=G.Kiran\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"G.Kiran\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if status=inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"inactive\");\r",
									"});\r",
									"\r",
									"// EXTRACT THE UPDATED NAME\r",
									"\r",
									"var extractedUpdatedName = pm.response.json().name;\r",
									"pm.globals.set(\"globalExtractedUpdatedName\", extractedUpdatedName);\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"UPDATE THE CREATED USER has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS UPDATED\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"UPDATE THE CREATED USER has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\"); // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{envAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}} {{globalExtractedName}}\",\r\n    \"email\": \"{{globalExtractedEmail}}\",\r\n    \"status\": \"{{globalExtractedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS UPDATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code from server is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server is < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format from server\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// VERIFY IF CREATED USER IS UPDATED\r",
									"\r",
									"pm.test(\"Verify if created user is updated with name=\"+pm.globals.get(\"globalExtractedUpdatedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalExtractedUpdatedName\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"VERIFY IF USER IS UPDATED has PASSED\");\r",
									"    pm.execution.setNextRequest(\"DELETE THE CREATED USER\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"VERIFY IF USER IS UPDATED has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\"); // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{envAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE THE CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code from server is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time from server < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(\"DELETE THE CREATED USER has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS DELETED\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"DELETE THE CREATED USER has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\"); // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{envAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalExtractedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS DELETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code from server is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time from server is < 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format from server\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers do not reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"// VERIFY IF CREATED USER IS DELETED\r",
									"\r",
									"pm.test(\"Verify if created user is deleted with id=\"+pm.globals.get(\"globalExtractedID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalExtractedID\"));\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"VERIFY IF USER IS DELETED has PASSED\");\r",
									"    pm.execution.setNextRequest(\"\"); \r",
									"}\r",
									"else {\r",
									"    console.log(\"VERIFY IF USER IS DELETED has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\"); // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{envAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEGATIVE TESTING",
			"item": [
				{
					"name": "UNSUPPORTED HTTP METHODS",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// RESPONSE CODE TESTING\r",
											"\r",
											"pm.test(\"Verify if response code from server is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// RESPONSE TIME TESTING\r",
											"\r",
											"pm.test(\"Verify if response time from server is < 4 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"// RESPONSE BODY TESTING\r",
											"\r",
											"pm.test(\"Verify if response body is received from server\", function () {\r",
											"    pm.response.to.have.body();\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if response body is received in JSON format from server\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"// RESPONSE HEADERS TESTING\r",
											"\r",
											"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if response headers do not reveal project details\", function () {\r",
											"    pm.response.to.not.have.header(\"Server\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7142154",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7142154"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7142154",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7142154"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7141380",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7141380"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7141381",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7141381"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BROKEN ENDPOINTS TESTING",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/private/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/private/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/private/v2/users/7142154",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users",
										"7142154"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/7142154",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"7142154"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/private/v2/users/7141382",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users",
										"7141382"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/7141382",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"7141382"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PAYLOAD TAMPERING TESTING",
					"item": [
						{
							"name": "CREATE USER API-NAME EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \")(*&^%$#@!~_+{}0987654321\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \")(*&^%$#@!~_+{}0987654321@outlook.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \")(*&^%$#@!~_+{}0987654321\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA TYPE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \")(*&^%$#@!~_+{}0987654321\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA LENGTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PushpaleelaSatishGeethanjaliBashaBalajiNisanthManjulaSyamalaKrishnaveni\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-INVALID DATA LENGTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PushpaleelaSatishGeethanjaliBashaBalajiNisanthManjulaSyamalaKrishnaveni\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"PushpaleelaSatishGeethanjaliBashaBalajiNisanthManjulaSyamalaKrishnaveni@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-GENDER EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-EMAIL EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-STATUS EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-MISSING NAME FIELD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n //   \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-MISSING GENDER FIELD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n //   \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-MISSING EMAIL FIELD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n //   \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-MISSING STATUS FIELD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n //   \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API-ADDITIONAL FIELDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\",\r\n    \"dateOfBirth\":\"01-01-1990\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INSECURE PROTOCOL TESTING",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "http://gorest.co.in/public/v2/users",
									"protocol": "http",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://gorest.co.in/public/v2/users",
									"protocol": "http",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"G.Kiran\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://gorest.co.in/public/v2/users/7142370",
									"protocol": "http",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7142370"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer a1acf13036e08546446ecbcbeb75b11959fbfcc0795218a185cfc982f6982c29"
									}
								],
								"url": {
									"raw": "http://gorest.co.in/public/v2/users/7142369",
									"protocol": "http",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7142369"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}